(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{284:function(t,a,n){"use strict";n.r(a);var e=n(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"hands-on-note-for-go-lang"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hands-on-note-for-go-lang"}},[t._v("#")]),t._v(" Hands on Note for Go Lang")]),t._v(" "),a("h4",{attrs:{id:"make-a-api-demo-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-a-api-demo-example"}},[t._v("#")]),t._v(" Make A API [ Demo Example ]")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import (\n   "io/ioutil"\n   "log"\n   "net/http"\n)\n\nfunc main() {\n   resp, err := http.Get("https://jsonplaceholder.typicode.com/posts")\n   if err != nil {\n      log.Fatalln(err)\n   }\n//We Read the response body on the line below.\n   body, err := ioutil.ReadAll(resp.Body)\n   if err != nil {\n      log.Fatalln(err)\n   }\n//Convert the body to type string\n   sb := string(body)\n   log.Printf(sb)\n}\n')])])]),a("h4",{attrs:{id:"concurrent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrent"}},[t._v("#")]),t._v(" Concurrent:")]),t._v(" "),a("h4",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('str := "Hello"\n\n')])])]),a("h3",{attrs:{id:"packages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#packages"}},[t._v("#")]),t._v(" Packages:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import "fmt"\nimport "math/rand"\nimport (\n  "fmt"        // gives fmt.Println\n  "math/rand"  // gives rand.Intn\n)\n')])])]),a("h4",{attrs:{id:"wait-group"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wait-group"}},[t._v("#")]),t._v(" Wait Group:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import "sync"\n\nfunc main() {\n  var wg sync.WaitGroup\n  \n  for _, item := range itemList {\n    // Increment WaitGroup Counter\n    wg.Add(1)\n    go doOperation(&wg, item)\n  }\n  // Wait for goroutines to finish\n  wg.Wait()\n  \n}\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);